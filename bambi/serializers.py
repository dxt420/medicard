# from rest_auth.serializers import 
from rest_auth.registration.serializers import RegisterSerializer
from rest_framework import serializers
from django.db import models
from . models import CustomUser

# class RegisterSerializer(serializers.Serializer):

#     email = serializers.EmailField(required=True)
#     password = serializers.CharField(write_only=True)

#     def validate_email(self, email):
#         email = get_adapter().clean_email(email)
#         if email and email_address_exists(email):
#             raise serializers.ValidationError(
#                 _("A user is already registered with this e-mail address."))
#         return email

#     def validate_password(self, password):
#         return get_adapter().clean_password(password)

#     def get_cleaned_data(self):
#         return {
#             'password': self.validated_data.get('password', ''),
#             'email': self.validated_data.get('email', '')
#         }

#     def save(self, request):
#         user = get_user_model()
#         cleaned_data = self.get_cleaned_data()
#         user.create_user(**cleaned_data)
#         return user


class UserInviteSerializer(RegisterSerializer):

    # first_name and last_name were required for my case but they are not necessary.
    # first_name = serializers.CharField(required=True)
    # last_name = serializers.CharField(required=True)
    email = serializers.EmailField(required=True)
    # override password1 and password2 to not be required.
    password1 = serializers.CharField(write_only=True, required=False)
    password2 = serializers.CharField(write_only=True, required=False)

    # override validate so that you don't get the error that
    # password1 and password2 are required. 
    def validate(self, data):
        return data

    def get_cleaned_data(self):
        super(UserInviteSerializer, self).get_cleaned_data()

        return {
            # 'first_name': self.validated_data.get('first_name', ''),
            # 'last_name': self.validated_data.get('last_name', ''),
            'email': self.validated_data.get('email', ''),
        }

    # create your own create method.
    def create(self, validated_data):
        user = CustomUser(**validated_data)

        # this is really important because password is required 
        # by the User model. So you need to use the django method
        # `set_unusable_password`
        user.set_unusable_password()
        # print(validated_data)
        # print(validated_data['email'])

        # username was not being generated by AllAuth so I had to set it.
        user.username = validated_data['email']
        # user.email = validated_data['email']
        print(user)
        user.save()
        return user 